x-volumes: &default-volume
  volumes:
    - app-data:/data
    - app-var:/var/www/packagist/var

x-restart-policy: &restart_policy
  restart: unless-stopped

x-environment: &default-environment
  REDIS_URL: redis://redis
  DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?serverVersion=14&charset=utf8"
  SKIP_INIT: 1

x-networks: &networks
  networks:
    - packeton-network

services:
  redis:
    container_name: redis
    image: redis:7-alpine
    hostname: redis
    <<: [*restart_policy, *networks]
    volumes:
      - redis-data:/data

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    hostname: postgres
    <<: [*restart_policy, *networks]
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

  packeton:
    container_name: packeton
    image: packeton/packeton:2.6
    hostname: packeton
    command: ['php-fpm', '-F']
    <<: [*restart_policy, *default-volume, *networks]
    environment:
      <<: *default-environment
      SKIP_INIT: 0
      WAIT_FOR_HOST: 'postgres:5432'
      ADMIN_USER: ${ADMIN_USER}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_EMAIL: ${ADMIN_EMAIL}

      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}

    depends_on:
      - "postgres"
      - "redis"

  nginx:
    container_name: nginx
    image: packeton/packeton:2.6
    hostname: nginx
    ports:
      - '127.0.0.1:8088:80'
    <<: [*restart_policy, *default-volume, *networks]
    command: >
      bash -c 'sed s/_PHP_FPM_HOST_/packeton:9000/g < docker/nginx/nginx-tpl.conf > /etc/nginx/nginx.conf && nginx'
    environment:
      <<: *default-environment
      WAIT_FOR_HOST: 'packeton:9000'
    depends_on:
      - "packeton"

  worker:
    container_name: worker
    image: packeton/packeton:2.6
    hostname: packeton-worker
    command: ['bin/console', 'packagist:run-workers', '-v']
    user: www-data
    <<: [*restart_policy, *default-volume, *networks]
    environment:
      <<: *default-environment
      WAIT_FOR_HOST: 'packeton:9000'
    depends_on:
      - "packeton"

  cron:
    container_name: cron
    image: packeton/packeton:2.6
    hostname: packeton-cron
    command: ['bin/console', 'okvpn:cron', '--demand', '--time-limit=3600']
    user: www-data
    <<: [*restart_policy, *default-volume, *networks]
    environment:
      <<: *default-environment
      WAIT_FOR_HOST: 'packeton:9000'
    depends_on:
      - "packeton"

volumes:
  redis-data:
  postgres-data:
  app-data:
  app-var:

networks:
  packeton-network: